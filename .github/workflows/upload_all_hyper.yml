import os
import glob
import pandas as pd
from tableauhyperapi import (
    HyperProcess,
    Telemetry,
    Connection,
    TableDefinition,
    SqlType,
    Inserter,
    CreateMode
)
import tableauserverclient as TSC

# ── CONFIG ─────────────────────────────────────────────────────────────────────
PAT_NAME       = os.environ["TABLEAU_PAT_NAME"]
PAT_SECRET     = os.environ["TABLEAU_PAT_SECRET"]
SITE_NAME      = os.environ["TABLEAU_SITE_NAME"]       # e.g. 'thecadmusgrouponline'
PROJECT_ID     = os.environ["TABLEAU_PROJECT_ID"]      # Tableau Project LUID
TABLEAU_SERVER = os.environ["TABLEAU_REST_URL"]        # e.g. 'https://prod-useast-a.online.tableau.com'

# ── CONVERT CSV TO HYPER ───────────────────────────────────────────────────────
def convert_csv_to_hyper(csv_path: str, hyper_path: str):
    """Convert CSV to .hyper format (all TEXT columns)"""
    df = pd.read_csv(csv_path).fillna("").astype(str)
    table_def = TableDefinition(table_name="Extract")
    for col in df.columns:
        table_def.add_column(col, SqlType.text())

    with HyperProcess(telemetry=Telemetry.SEND_USAGE_DATA_TO_TABLEAU) as hyper:
        with Connection(endpoint=hyper.endpoint, database=hyper_path, create_mode=CreateMode.CREATE_AND_REPLACE) as conn:
            conn.catalog.create_table(table_def)
            with Inserter(conn, table_def) as inserter:
                inserter.add_rows(rows=df.values.tolist())
                inserter.execute()

    print(f"📦 Created {hyper_path} ({os.path.getsize(hyper_path)} bytes)")

# ── PUBLISH TO TABLEAU ─────────────────────────────────────────────────────────
def main():
    # Step 1: Convert all CSVs in the repo to .hyper
    csv_files = glob.glob("*.csv")
    hyper_files = []
    print("🗂️ Found CSVs:", csv_files)

    for csv in csv_files:
        base = os.path.splitext(csv)[0]
        hyper = f"{base}.hyper"
        convert_csv_to_hyper(csv, hyper)
        hyper_files.append((base, hyper))

    # Step 2: Authenticate with Tableau Server
    auth = TSC.PersonalAccessTokenAuth(PAT_NAME, PAT_SECRET, SITE_NAME)
    server = TSC.Server(TABLEAU_SERVER, use_server_version=True)

    with server.auth.sign_in(auth):
        for base, hyper in hyper_files:
            datasource_name = f"{base}_Extract"
            print(f"📤 Publishing {hyper} as '{datasource_name}' into project ID {PROJECT_ID}")

            ds_item = TSC.DatasourceItem(project_id=PROJECT_ID, name=datasource_name)

            # Always create new extract to avoid overwriting Live sources
            published_ds = server.datasources.publish(
                ds_item,
                hyper,
                mode=TSC.Server.PublishMode.CreateNew
            )

            print(f"✅ Published extract: '{datasource_name}' (Datasource ID: {published_ds.id})")

            # Trigger an immediate refresh (will only work for extracts)
            job = server.datasources.refresh(published_ds)
            print(f"🔄 Triggered refresh for '{datasource_name}' (Job ID: {job.id})")

    print("🚪 Finished upload + refresh process.")

if __name__ == "__main__":
    main()

